1
00:00:00,630 --> 00:00:03,390
Como vimos ao longo do curso até agora.

2
00:00:03,390 --> 00:00:07,680
Nos aplicativos NestJS, tudo tem seu lugar.

3
00:00:07,680 --> 00:00:13,380
Essa organização estruturada de aplicativos nos ajuda a
gerenciar a complexidade e desenvolver com SOLID

4
00:00:13,380 --> 00:00:20,130
princípios. Este tipo de organização é especialmente útil
como o tamanho do nosso aplicativo ou equipe

5
00:00:20,130 --> 00:00:27,160
cresce. Mantendo o código organizado, estabelecendo
limites, e ter arquitetura dedicada

6
00:00:27,160 --> 00:00:31,230
blocos de construção, todos com
conjunto separado de responsabilidades.

7
00:00:31,230 --> 00:00:37,380
Nos ajuda a garantir que nosso aplicativo
permanece facilmente sustentável e escalável ao longo do tempo.

8
00:00:37,380 --> 00:00:43,070
No NestJS, temos 4 blocos de construção adicionais
para recursos, que ainda não mostramos!

9
00:00:43,070 --> 00:00:48,990
São eles: Filtros de Exceção,
Tubos, Guardas e Interceptores.

10
00:00:48,990 --> 00:00:53,640
Os filtros de exceção são responsáveis u200bu200bpelo tratamento
e processando exceções não tratadas que *podem*

11
00:00:53,640 --> 00:00:55,800
ocorrem em nosso aplicativo.

12
00:00:55,800 --> 00:01:02,670
Eles nos permitem controlar o exato -fluxo- e -conteúdo- de
qualquer ou respostas específicas, nós enviamos de volta para o

13
00:01:02,670 --> 00:01:04,460
cliente.

14
00:01:04,460 --> 00:01:10,580
Pipes são normalmente úteis para lidar com 2
coisas: "transformações", que significa transformar dados de *entrada*

15
00:01:10,610 --> 00:01:18,080
para a *saída desejada* e "validação", significando *avaliar
dados de entrada* e se VÁLIDO - deixe

16
00:01:18,080 --> 00:01:24,960
passar pelo tubo inalterado, mas
se NÃO VÁLIDO, lançando uma exceção.

17
00:01:24,960 --> 00:01:29,470
Os guardas determinam se uma determinada solicitação
atende a certas condições, como autenticação,

18
00:01:29,620 --> 00:01:33,760
autorização, funções, ACLs, etc.

19
00:01:33,760 --> 00:01:39,430
E se as condições forem atendidas, os pedidos
será *permitido* acessar a rota.

20
00:01:39,430 --> 00:01:43,290
E por último, interceptadores.

21
00:01:43,290 --> 00:01:49,230
Os interceptores têm muitos recursos úteis inspirados
pela técnica de programação orientada a aspectos.

22
00:01:49,230 --> 00:01:55,800
Interceptores tornam possível: 1) vincular
lógica extra, antes ou depois da execução do método.

23
00:01:55,800 --> 00:01:59,400
2) Transforme o resultado retornado de um método.

24
00:01:59,400 --> 00:02:06,380
3) Estenda o comportamento básico do método, 4) e até mesmo
*substituir* completamente um método, dependendo de

25
00:02:06,380 --> 00:02:12,070
condições. Por exemplo: manipulação
algo como "respostas de cache".

26
00:02:12,070 --> 00:02:14,600
Então, agora que cobrimos o básico.

27
00:02:14,600 --> 00:02:18,430
Vamos mergulhar em todos os 4 desses novos
blocos de construção, nas próximas lições.

