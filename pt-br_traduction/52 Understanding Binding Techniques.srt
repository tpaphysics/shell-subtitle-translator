1
00:00:00,950 --> 00:00:04,970
Antes de entrarmos nos detalhes
de cada bloco de construção Nest.

2
00:00:04,970 --> 00:00:09,560
Vamos dar um passo para trás e falar sobre alguns
abordagens que podemos adotar para vincular qualquer um desses

3
00:00:09,560 --> 00:00:13,520
blocos, para diferentes partes do nosso aplicativo.

4
00:00:13,520 --> 00:00:18,560
Basicamente, existem 3 maneiras diferentes de vincular:
Filtros, Guardas e Interceptores para nossa rota

5
00:00:18,560 --> 00:00:23,650
manipuladores - com um bônus 4º
maneira específica para Pipes!

6
00:00:23,650 --> 00:00:30,250
Os blocos de construção do ninho podem ser: com escopo "Global",
Com escopo de "Controlador", com escopo de "Método" e o bônus

7
00:00:30,250 --> 00:00:36,110
4º um escopo "Param" (que, como
disse está disponível apenas para Pipes).

8
00:00:36,110 --> 00:00:40,850
Observe que essas diferentes técnicas de vinculação fornecem
granularidade e controle em diferentes níveis em

9
00:00:40,850 --> 00:00:42,440
seu aplicativo.

10
00:00:42,440 --> 00:00:47,600
Cada um NÃO *substitui* o outro, mas
em vez disso, camadas cada um -em cima-.

11
00:00:47,600 --> 00:00:50,500
Portanto, tenha cuidado em como você implementá-los.

12
00:00:50,500 --> 00:00:56,530
Por exemplo, se você tiver um Pipe com escopo global, ele
será aplicado assim como qualquer outro (Pipe) que você

13
00:00:56,530 --> 00:00:57,730
pode adicionar.

14
00:00:57,730 --> 00:01:01,570
Seja no escopo do método no escopo do controlador, etc.

15
00:01:01,570 --> 00:01:06,010
Até agora, neste curso, já vimos globalmente
tubos com escopo em ação, quando usamos o

16
00:01:06,010 --> 00:01:10,990
ValidationPipe para nos ajudar a validar a entrada
solicitar cargas úteis, entre outras coisas.

17
00:01:11,860 --> 00:01:14,770
Se abrirmos nosso arquivo main.ts.

18
00:01:14,770 --> 00:01:20,650
Veremos que limitamos anteriormente o
ValidationPipe globalmente chamando o `useGlobalPipes()`

19
00:01:20,650 --> 00:01:23,950
método de nossa instância `app`.

20
00:01:23,950 --> 00:01:25,430
Você pode ver que se digitarmos `app.

21
00:01:25,460 --> 00:01:28,820
usar'.

22
00:01:28,820 --> 00:01:35,330
O Intellisense nos mostra métodos correspondentes para
todos os outros blocos de construção disponíveis aqui.

23
00:01:35,330 --> 00:01:43,820
Respectivamente `useGlobalPipes`, `useGlobalGuards`,
`useGlobalInterceptors` e `useGlobalFilters`.

24
00:01:43,820 --> 00:01:45,530
Voltando ao nosso ValidationPipe aqui.

25
00:01:46,400 --> 00:01:52,130
Uma grande limitação de configurá-lo e instanciar
por nós mesmos assim, é que podemos

26
00:01:52,130 --> 00:01:55,190
*NÃO* injete nenhuma dependência aqui!

27
00:01:55,190 --> 00:02:01,210
Já que estamos configurando *fora* de
o contexto de qualquer Módulo NestJS.

28
00:02:01,210 --> 00:02:03,850
Então, como podemos contornar isso?

29
00:02:03,850 --> 00:02:10,240
Uma opção que temos é configurar um Pipe
diretamente de dentro de um módulo Nest usando o provedor personalizado

30
00:02:10,240 --> 00:02:13,720
sintaxe baseada, vimos em lições anteriores.

31
00:02:13,720 --> 00:02:22,670
Vamos abrir nosso arquivo AppModule e
definir algo chamado provedor `APP_PIPE`.

32
00:02:22,670 --> 00:02:29,090
Este provedor APP_PIPE é um provedor especial
token exportado do pacote @nestjs/core.

33
00:02:29,090 --> 00:02:30,890
Fornecendo ValidationPipe dessa maneira.

34
00:02:31,190 --> 00:02:37,460
Vamos Nest instanciar o ValidationPipe dentro do
escopo do AppModule e uma vez criado,

35
00:02:37,970 --> 00:02:41,120
registra-o como um Pipe Global.

36
00:02:41,120 --> 00:02:45,380
Observe que também existem tokens correspondentes
para todos os outros recursos de bloco de construção!

37
00:02:45,380 --> 00:02:54,570
Como APP_INTERCEPTOR,
APP_GUARD e APP_FILTER.

38
00:02:54,570 --> 00:02:55,740
De volta ao nosso ValidationPipe.

39
00:02:56,700 --> 00:02:59,760
E se *não* quisermos usá-lo globalmente?

40
00:02:59,760 --> 00:03:04,270
Mas alguns são mais específicos
como em um determinado controlador.

41
00:03:04,270 --> 00:03:09,940
Vamos imaginar que queremos vincular um ValidationPipe
para cada manipulador de rota definido apenas dentro do nosso

42
00:03:09,940 --> 00:03:13,940
CoffeesController.

43
00:03:13,940 --> 00:03:19,640
Vamos abrir nosso arquivo CoffeesController e fazer
uso de um novo decorador `@UsePipes()` que nós

44
00:03:19,640 --> 00:03:28,350
ainda não vi. Este decorador @UsePipes() pode ser passado
em uma única classe de tubulação ou uma vírgula

45
00:03:28,350 --> 00:03:35,310
lista separada de Classes de Pipe.

46
00:03:35,310 --> 00:03:36,630
Assim como em outros cenários.

47
00:03:37,020 --> 00:03:41,880
Há também decoradores correspondentes para todos os outros
bloco de construção que pode ser usado aqui como

48
00:03:41,880 --> 00:03:43,140
Nós vamos.

49
00:03:43,140 --> 00:03:52,130
Nomeado `@UseInterceptors()`, `@UseGuards()`,
e `@UseFilters()`.

50
00:03:52,130 --> 00:03:55,610
Alternativamente, você pode até passar um
"instância" de uma classe aqui.

51
00:03:55,610 --> 00:04:00,570
Por exemplo, fornecer `novo
ValidationPipe()` dentro do decorador.

52
00:04:00,570 --> 00:04:06,500
Isso é super útil quando você quer passar
em um objeto de configuração específico para o ValidationPipe

53
00:04:06,510 --> 00:04:09,720
para *este* cenário exato.

54
00:04:09,720 --> 00:04:15,300
Observe que, como prática recomendada, tente aplicar
filtra usando classes em vez de instâncias sempre que

55
00:04:15,300 --> 00:04:22,560
possível. Isso reduz o uso de memória, pois o Nest pode
reutilizar facilmente instâncias da mesma classe, em

56
00:04:22,560 --> 00:04:25,420
todo o seu Módulo.

57
00:04:25,420 --> 00:04:29,560
Todos os blocos de construção também podem ter escopo de Método.

58
00:04:29,560 --> 00:04:33,160
Imagine que você deseja vincular
um Pipe para uma Rota específica.

59
00:04:33,160 --> 00:04:36,490
Podemos conseguir isso simplesmente aplicando
o mesmo decorador que acabamos de ver.

60
00:04:36,580 --> 00:04:42,940
`@UsePipes()`, mas além do específico
método em que queremos declará-lo.

61
00:04:42,940 --> 00:04:48,160
Digamos que queremos adicionar validação específica
ao nosso método GET findAll(), dentro de CoffeesController

62
00:04:54,130 --> 00:05:01,670
. Com esta configuração. Este ValidationPipe é *somente*
aplicado a este único manipulador de rota findAll().

63
00:05:01,670 --> 00:05:07,430
Já estamos familiarizados com os 3 diferentes
maneiras de amarrar filtros, guardas, tubos e interceptores

64
00:05:07,700 --> 00:05:09,740
para nossos manipuladores de rotas.

65
00:05:09,740 --> 00:05:15,320
Mas como dissemos, há um 4º
forma de bônus - disponível apenas para Pipes.

66
00:05:15,320 --> 00:05:18,270
E é chamado de escopo baseado em Param.

67
00:05:18,270 --> 00:05:26,400
Pipes com escopo param, são úteis quando a validação
lógica diz respeito a APENAS UM parâmetro específico.

68
00:05:26,400 --> 00:05:29,770
Vamos rolar para baixo até o método de atualização aqui.

69
00:05:29,770 --> 00:05:35,920
Este método recebe 2 argumentos: o recurso "id", como
bem como a "carga útil" necessária para atualizar o

70
00:05:35,920 --> 00:05:38,140
entidade existente.

71
00:05:38,140 --> 00:05:43,690
E se quisermos vincular um Pipe ao
"body" da solicitação, mas não o parâmetro "id".

72
00:05:43,690 --> 00:05:47,740
É exatamente aqui que o parâmetro
tubo baseado vem a calhar.

73
00:05:47,740 --> 00:05:54,160
Ao passar a referência de classe ValidationPipe, diretamente para
o decorador @Body() aqui, podemos deixar

74
00:05:54,160 --> 00:06:01,400
Nest sabe executar *este tubo em particular*
-exclusivamente- apenas para este parâmetro específico!

75
00:06:01.400 --> 00:06:02.990
E aí temos que.

76
00:06:02,990 --> 00:06:05,780
Com estes 4 blocos de construção poderosos.

77
00:06:05,780 --> 00:06:12,740
Agora podemos controlar o fluxo, conteúdo,
validação em qualquer coisa em nosso aplicativo, globalmente...

78
00:06:12,740 --> 00:06:17,270
Todo o caminho para um determinado
controlador, método ou até mesmo um parâmetro.

