1
00:00:00,950 --> 00:00:04,970
Before we jump into the specifics
of each Nest building block.

2
00:00:04,970 --> 00:00:09,560
Let's take a step back and talk about a few
approaches we can take to bind any of these building

3
00:00:09,560 --> 00:00:13,520
blocks, to different parts of our application.

4
00:00:13,520 --> 00:00:18,560
Basically there are 3 different ways of binding:
Filters, Guards, and Interceptors to our route

5
00:00:18,560 --> 00:00:23,650
handlers - with a bonus 4th
way that's specific to Pipes!

6
00:00:23,650 --> 00:00:30,250
Nest building blocks can be: "Globally"-scoped,
"Controller"-scoped, "Method"-scoped, and the bonus

7
00:00:30,250 --> 00:00:36,110
4th one "Param"-scoped (which as we
said is available to Pipes only).

8
00:00:36,110 --> 00:00:40,850
Note that these different binding techniques give you
granularity and control at different levels in

9
00:00:40,850 --> 00:00:42,440
your application.

10
00:00:42,440 --> 00:00:47,600
Each one does NOT *override* another, but
rather layers each one -on top-.

11
00:00:47,600 --> 00:00:50,500
So be careful on how you implement these.

12
00:00:50,500 --> 00:00:56,530
For example if you have a globally scoped Pipe, it
will be applied as well as any other (Pipe) you

13
00:00:56,530 --> 00:00:57,730
might add.

14
00:00:57,730 --> 00:01:01,570
Whether it's controller-scoped method-scoped etc.

15
00:01:01,570 --> 00:01:06,010
So far in this course we've already seen globally
scoped pipes in action, when we use the

16
00:01:06,010 --> 00:01:10,990
ValidationPipe to help us validate incoming
request payloads, amongst other things.

17
00:01:11,860 --> 00:01:14,770
If we open up our main.ts file.

18
00:01:14,770 --> 00:01:20,650
We'll see that we previously bound the
ValidationPipe globally by calling the `useGlobalPipes()`

19
00:01:20,650 --> 00:01:23,950
method of our `app` instance.

20
00:01:23,950 --> 00:01:25,430
You could see that if we type `app.

21
00:01:25,460 --> 00:01:28,820
use`.

22
00:01:28,820 --> 00:01:35,330
Intellisence shows us corresponding methods for
every other building block available here.

23
00:01:35,330 --> 00:01:43,820
Respectively `useGlobalPipes`, `useGlobalGuards`,
`useGlobalInterceptors`, and `useGlobalFilters`.

24
00:01:43,820 --> 00:01:45,530
Going back to our ValidationPipe here.

25
00:01:46,400 --> 00:01:52,130
One big limitation of setting it up and instantiating
it by ourselves like this, is that we can

26
00:01:52,130 --> 00:01:55,190
*NOT* inject any dependencies here!

27
00:01:55,190 --> 00:02:01,210
Since we're setting it up *outside* of
the context of any NestJS Module.

28
00:02:01,210 --> 00:02:03,850
So how do we work around this?

29
00:02:03,850 --> 00:02:10,240
One option we have, is to set up a Pipe
directly from inside a Nest module using the custom-provider

30
00:02:10,240 --> 00:02:13,720
based syntax, we saw in earlier lessons.

31
00:02:13,720 --> 00:02:22,670
Let's open up our AppModule file and
define something called the `APP_PIPE` provider.

32
00:02:22,670 --> 00:02:29,090
This APP_PIPE provider is a special
token exported from the @nestjs/core package.

33
00:02:29,090 --> 00:02:30,890
Providing ValidationPipe in this manner.

34
00:02:31,190 --> 00:02:37,460
Let's Nest instantiate the ValidationPipe within the
scope of the AppModule and once created,

35
00:02:37,970 --> 00:02:41,120
registers it as a Global Pipe.

36
00:02:41,120 --> 00:02:45,380
Note that there are also corresponding tokens
for every other building block feature!

37
00:02:45,380 --> 00:02:54,570
Such as APP_INTERCEPTOR,
APP_GUARD, and APP_FILTER.

38
00:02:54,570 --> 00:02:55,740
Back to our ValidationPipe.

39
00:02:56,700 --> 00:02:59,760
What if we *don't* want to use it globally?

40
00:02:59,760 --> 00:03:04,270
But some are more specific
like on a certain Controller.

41
00:03:04,270 --> 00:03:09,940
Let's imagine that we want to bind a ValidationPipe
to every route handler defined only within our

42
00:03:09,940 --> 00:03:13,940
CoffeesController.

43
00:03:13,940 --> 00:03:19,640
Let's open up our CoffeesController file and make
use of a new decorator `@UsePipes()` that we

44
00:03:19,640 --> 00:03:28,350
haven't seen yet. This @UsePipes() decorator can be passed
in a single Pipe Class or a comma

45
00:03:28,350 --> 00:03:35,310
separated list of Pipe Classes.

46
00:03:35,310 --> 00:03:36,630
Just like in other scenarios.

47
00:03:37,020 --> 00:03:41,880
There are also corresponding decorators for every other
building block that can be used here as

48
00:03:41,880 --> 00:03:43,140
well.

49
00:03:43,140 --> 00:03:52,130
Named `@UseInterceptors()`, `@UseGuards()`,
and `@UseFilters()`.

50
00:03:52,130 --> 00:03:55,610
Alternatively, you can even pass an
"instance" of a class here.

51
00:03:55,610 --> 00:04:00,570
Take for example providing `new
ValidationPipe()` inside of the decorator.

52
00:04:00,570 --> 00:04:06,500
This is super useful when you want to pass
in a specific configuration object to the ValidationPipe

53
00:04:06,510 --> 00:04:09,720
for *this* exact scenario.

54
00:04:09,720 --> 00:04:15,300
Note that as a best practice try to apply
filters by using classes instead of instances whenever

55
00:04:15,300 --> 00:04:22,560
possible. This reduces memory usage since Nest can
easily reuse instances of the same class, across

56
00:04:22,560 --> 00:04:25,420
your entire Module.

57
00:04:25,420 --> 00:04:29,560
All building blocks can also be Method-scoped.

58
00:04:29,560 --> 00:04:33,160
Imagine that you want to bind
a Pipe to a specific Route.

59
00:04:33,160 --> 00:04:36,490
We can achieve this by simply applying
the same decorator we just saw.

60
00:04:36,580 --> 00:04:42,940
`@UsePipes()`, but on top of the specific
method we want to declare it on.

61
00:04:42,940 --> 00:04:48,160
Let's say we want to add specific validation
to our GET findAll() method, within CoffeesController

62
00:04:54,130 --> 00:05:01,670
. With this setup. This ValidationPipe is *only*
applied to this single findAll() Route handler.

63
00:05:01,670 --> 00:05:07,430
We are already familiar with the 3 different
ways of tying filters, guards, pipes, and interceptors

64
00:05:07,700 --> 00:05:09,740
to our Route handlers.

65
00:05:09,740 --> 00:05:15,320
But as we said, there is a 4th
bonus way - that's only available to Pipes.

66
00:05:15,320 --> 00:05:18,270
And it's called Param-based scope.

67
00:05:18,270 --> 00:05:26,400
Param-scoped Pipes, are useful when the validation
logic concerns ONLY ONE specific parameter.

68
00:05:26,400 --> 00:05:29,770
Let's scroll down to the update method here.

69
00:05:29,770 --> 00:05:35,920
This method takes 2 arguments: the resource "id", as
well as the "payload" required to update the

70
00:05:35,920 --> 00:05:38,140
existing entity.

71
00:05:38,140 --> 00:05:43,690
What if we want to bind a Pipe to the
"body" of the request but not the "id" parameter.

72
00:05:43,690 --> 00:05:47,740
This is exactly where the param
based pipe comes in handy.

73
00:05:47,740 --> 00:05:54,160
By passing the ValidationPipe class reference, directly to
the @Body() decorator here, we can let

74
00:05:54,160 --> 00:06:01,400
Nest know to run *this particular pipe*
-exclusively- for just this specific parameter!

75
00:06:01,400 --> 00:06:02,990
And there we have it.

76
00:06:02,990 --> 00:06:05,780
With these 4 powerful building blocks.

77
00:06:05,780 --> 00:06:12,740
We can now control the flow, content,
validation on anything in our application, globally...

78
00:06:12,740 --> 00:06:17,270
All the way down to a specific
controller, method, or even a parameter.

