1
00:00:00,630 --> 00:00:03,390
As we've seen throughout the course so far.

2
00:00:03,390 --> 00:00:07,680
In NestJS applications everything has its place.

3
00:00:07,680 --> 00:00:13,380
This structured application organization, helps us
manage complexity and develop with SOLID

4
00:00:13,380 --> 00:00:20,130
principles. This type of organization is especially useful
as the size of our application or team

5
00:00:20,130 --> 00:00:27,160
grows. Keeping code organized, establishing clear
boundaries, and having dedicated architectural

6
00:00:27,160 --> 00:00:31,230
building blocks, all with the
separate set of responsibilities.

7
00:00:31,230 --> 00:00:37,380
Helps us make sure that our application
remains easily maintainable and scalable over time.

8
00:00:37,380 --> 00:00:43,070
In NestJS, we have 4 additional building blocks
for features, that we haven't showcased yet!

9
00:00:43,070 --> 00:00:48,990
These are: Exception Filters,
Pipes, Guards, and Interceptors.

10
00:00:48,990 --> 00:00:53,640
Exception filters are responsible for handling
and processing unhandled exceptions that *might*

11
00:00:53,640 --> 00:00:55,800
occur in our application.

12
00:00:55,800 --> 00:01:02,670
They let us control the exact -flow- and -content- of
any or specific Responses, we send back to the

13
00:01:02,670 --> 00:01:04,460
client.

14
00:01:04,460 --> 00:01:10,580
Pipes are typically useful to handle 2
things: "transformations", meaning to transform *input* data

15
00:01:10,610 --> 00:01:18,080
to the *desired output* and "validation", meaning to *evaluate
input data* and if VALID - let it

16
00:01:18,080 --> 00:01:24,960
pass through the pipe unchanged but
if NOT VALID, throwing an Exception.

17
00:01:24,960 --> 00:01:29,470
Guards determine whether a given Request
meets certain conditions, like authentication,

18
00:01:29,620 --> 00:01:33,760
authorization, roles, ACLs, etc.

19
00:01:33,760 --> 00:01:39,430
And if the conditions are met, the requests
will be *allowed* to access the route.

20
00:01:39,430 --> 00:01:43,290
And lastly, interceptors.

21
00:01:43,290 --> 00:01:49,230
Interceptors have many useful capabilities inspired
by the aspect oriented programming technique.

22
00:01:49,230 --> 00:01:55,800
Interceptors make it possible to: 1) bind
extra logic, before or after method execution.

23
00:01:55,800 --> 00:01:59,400
2) Transform the result returned from a method.

24
00:01:59,400 --> 00:02:06,380
3) Extend basic method behavior, 4) and even
completely *override* a method, depending on specific

25
00:02:06,380 --> 00:02:12,070
conditions. For example: handling
something like "caching responses".

26
00:02:12,070 --> 00:02:14,600
So now that we've covered the basics.

27
00:02:14,600 --> 00:02:18,430
Let's dive into all 4 of these new
building blocks, in the next few lessons.

