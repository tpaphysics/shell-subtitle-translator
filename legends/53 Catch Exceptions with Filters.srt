1
00:00:01,230 --> 00:00:07,080
NestJS comes with a built-in Exceptions "layer",
responsible for processing all unhandled Exceptions

2
00:00:07,080 --> 00:00:09,090
across our application.

3
00:00:09,090 --> 00:00:14,490
When an exception is *not* handled by our
application, it is automatically caught by this layer,

4
00:00:14,790 --> 00:00:18,720
which sends the
appropriate user-friendly response.

5
00:00:18,720 --> 00:00:22,500
Out of the box. This action is
performed by a built-in global ExceptionFilter.

6
00:00:23,280 --> 00:00:28,680
While this base built-in ExceptionFilter can automatically
handle many use cases for us.

7
00:00:29,040 --> 00:00:30,780
We *may* want full control over it.

8
00:00:31,620 --> 00:00:37,320
For example, we may want to add exception logging
or return our Errors back in a different JSON

9
00:00:37,320 --> 00:00:39,400
schema.

10
00:00:39,400 --> 00:00:42,970
Exception Filters are designed
for exactly this purpose!

11
00:00:42,970 --> 00:00:48,520
They let us be in charge of the exact "flow
of control" and the "content" of the Response being sent

12
00:00:48,520 --> 00:00:51,240
back to the client.

13
00:00:51,240 --> 00:00:56,550
Let's create an ExceptionFilter, that is responsible for
catching exceptions that are an instance of

14
00:00:56,550 --> 00:01:02,960
the HttpException Class, and implement our
own custom response logic for it.

15
00:01:02,960 --> 00:01:08,060
Let's get started by firing up our terminal, and
generating a filter class using the Nest CLI filter

16
00:01:08,060 --> 00:01:09,560
schematic, by entering:.

17
00:01:10,220 --> 00:01:16,280
nest g filter common/filters/http-exception

18
00:01:17,000 --> 00:01:21,500
Note that we generated this filter in a /common/
directory, where we can keep things that are *not*

19
00:01:21,500 --> 00:01:23,990
tied to any specific domain.

20
00:01:23,990 --> 00:01:29,930
Let's open up the newly generated HttpExceptionFilter,
and see what we have inside.

21
00:01:29,930 --> 00:01:36,020
As you can see, the Nest CLI generated an
example filter, without any business logic of course.

22
00:01:36,020 --> 00:01:41,800
The @Catch() decorator on top, binds
the required metadata to the ExceptionFilter.

23
00:01:41,800 --> 00:01:46,550
This @Catch() decorator can take a single
parameter or a comma separated list.

24
00:01:47,270 --> 00:01:52,490
This allows us to set up a filter for several
types of exceptions at once if we want it.

25
00:01:52,490 --> 00:01:56,690
Since we want to process all
exceptions that are instances of HttpException.

26
00:01:57,320 --> 00:02:05,700
Let's pass the HttpException
class between the parentheses.

27
00:02:05,700 --> 00:02:12,600
All ExceptionFilter's should implement the
`ExceptionFilter` interface exported from @nestjs/common.

28
00:02:12,600 --> 00:02:18,780
This interface requires that we provide the
catch() method with its indicated method signature.

29
00:02:18,780 --> 00:02:24,030
Also we can see that our class accepts a Type
&lt;&gt; Argument, which indicates the Type of the exception

30
00:02:24,060 --> 00:02:26,880
argument in our catch() method.

31
00:02:26,880 --> 00:02:31,380
Again since we want to process all
exceptions that are instances of a HttpException.

32
00:02:31,950 --> 00:02:35,500
Lets changes this to

33
00:02:37,530 --> 00:02:43,530
All right with all of that setup now
we can implement our custom response logic.

34
00:02:43,530 --> 00:02:48,540
To do this, we'll need to access the
underlying platforms Response\{} object so that we can

35
00:02:48,540 --> 00:02:54,510
*manipulate or transform* it and
CONTINUE sending the response -afterwards-.

36
00:02:54,510 --> 00:02:58,140
So where do we get a
hold of the original Response?

37
00:02:58,140 --> 00:03:04,320
Let's use the second parameter here, "host" which we
can see as an instance of `ArgumentsHost`, and

38
00:03:04,320 --> 00:03:06,940
call the method switchToHttp() on it.

39
00:03:07,980 --> 00:03:13,260
Saving this as the variable
`ctx`, short for "context".

40
00:03:13,260 --> 00:03:20,330
This switchToHttp() method gives us access to
the native inflight Request or Response objects.

41
00:03:20,330 --> 00:03:23,270
Which is exactly what we need here.

42
00:03:23,270 --> 00:03:27,890
Next, let's use this `ctx` variable, and
call the `getResponse()` method on it.

43
00:03:28,890 --> 00:03:32,490
This method will return
our -underlying platforms- Response.

44
00:03:32,940 --> 00:03:39,170
Remember in NestJS, this is Express.js by default,
but could also be swapped for Fastify.

45
00:03:39,170 --> 00:03:41,420
For better type-safety here.

46
00:03:41,420 --> 00:03:44,870
Let's specify the Type as a "Response".

47
00:03:44,870 --> 00:03:49,930
importing this Type from the "express" package.

48
00:03:49,930 --> 00:03:51,220
Now that we have our response.

49
00:03:52,000 --> 00:03:58,420
Let's use the "exception" parameter available to us
in *this* method, and extract 2 things.

50
00:03:58,420 --> 00:04:02,790
The "statusCode", and "body"
from the current exception.

51
00:04:02,790 --> 00:04:09,840
To get the status, we can simply call
the `getStatus()` method as we see here.

52
00:04:09,840 --> 00:04:15,660
Let's also get a hold of the raw Exception
Response, by calling to `getResponse()` method and saving

53
00:04:15,660 --> 00:04:18,210
that to a variable as well.

54
00:04:18,210 --> 00:04:23,240
Since for demonstration purposes - we're trying to
pass back this "original" Error response, we need

55
00:04:23,240 --> 00:04:26,170
to do a little bit of work here.

56
00:04:26,170 --> 00:04:30,430
First we need to test whether the
Response is a String or an Object.

57
00:04:30,430 --> 00:04:37,190
If it's a string we're going to create an Object
and put that String inside of the message property.

58
00:04:37,190 --> 00:04:42,350
Otherwise we're all set in our
exceptionResponse is already an object.

59
00:04:42,350 --> 00:04:47,390
By doing all of this. Our errors will now be
fairly "uniform", and we can (...) spread this error

60
00:04:47,390 --> 00:04:51,820
variable into our final response, which
we'll do in a moment!

61
00:04:51,820 --> 00:04:54,320
Great so now that we have everything we need.

62
00:04:54,320 --> 00:04:59,150
Let's start building our response
*back* that we'll be sending.

63
00:04:59,150 --> 00:05:03,810
First let's set the statusCode for the response we're
going to send back via the `status()` method.

64
00:05:03,810 --> 00:05:11,880
(`response.status(status)`) Lastly we need to
send the `exceptionResponse` back.

65
00:05:11,880 --> 00:05:16,410
Our applications underlying platform is
Express.js, which is the default.

66
00:05:16,410 --> 00:05:19,020
So There are several ways we could do this!

67
00:05:19,020 --> 00:05:22,380
In our case. Let's just
use express's `.json()` Method.

68
00:05:23,160 --> 00:05:28,590
We can simply chain this method after our status()
call (as we see here), and using the (...)spread

69
00:05:28,590 --> 00:05:35,220
operator, we can pass the original Error from
our Exception inside of this .json() method.

70
00:05:35,220 --> 00:05:39,960
As of right now. Our ExceptionFilter here
isn't really doing anything unique yet.

71
00:05:39,960 --> 00:05:44,070
So let's pass in something custom
here along with the original exception.

72
00:05:44,070 --> 00:05:49,100
This way we have something we can look for in
all of our errors to make sure everything with the

73
00:05:49,110 --> 00:05:51,620
ExceptionFilter works!

74
00:05:51,620 --> 00:05:54,800
Let's add a new `timestamp` property and
give it the value of new Date().

75
00:05:54,800 --> 00:05:56,840
toISOString(). Great.

76
00:05:57,140 --> 00:06:02,570
Now with all this in place, let's
bind this global ExceptionFilter to our application.

77
00:06:02,570 --> 00:06:08,270
Since we don't need any external providers, here
we can just bind this ExceptionFilter globally

78
00:06:08,270 --> 00:06:12,530
using the `app` instance in our main.ts file.

79
00:06:12,530 --> 00:06:16,380
Let's head over to the main.ts file
and add it real quick with `app.

80
00:06:16,460 --> 00:06:17,660
useGlobalFilters()`.

81
00:06:19,670 --> 00:06:24,450
Passing in: `new HttpExceptionFilter()` inside.

82
00:06:24,450 --> 00:06:26,010
Now that everything's in place.

83
00:06:26,010 --> 00:06:29,040
Let's test it out by triggering some API errors!

84
00:06:29,040 --> 00:06:34,710
Let's make sure that our app is running in our
terminal, and if not make sure we run: `npm run

85
00:06:34,830 --> 00:06:36,860
start:dev` again.

86
00:06:36,860 --> 00:06:38,220
With our application running.

87
00:06:38,310 --> 00:06:43,950
Let's open up insomnia, and perform a GET request
to a *non existing* resource and purposely make

88
00:06:43,950 --> 00:06:46,030
an Error happen!

89
00:06:46,030 --> 00:06:54,010
Let's hit something like /coffees/-1 where "-1", is obviously
an "id" we don't have in the database.

90
00:06:54,010 --> 00:07:00,220
As we can see the Response came back with
an Error and clearly used our new custom ExceptionFilter!

91
00:07:00,220 --> 00:07:03,230
Since the response contains
our new `timestamp` property.

92
00:07:03,230 --> 00:07:09,100
Perfect. So naturally this exception we
created was a basic example implementation.

93
00:07:09,100 --> 00:07:13,630
But you can see that within this ExceptionFilter, we
could have just as easily used some sort of

94
00:07:13,630 --> 00:07:17,830
Logging Service to track our errors,
maybe even called an Analytics API.

95
00:07:18,550 --> 00:07:23,320
Anything we'd want to do whenever
an HttpException occurs in our application.

